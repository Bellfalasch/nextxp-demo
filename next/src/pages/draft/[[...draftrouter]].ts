import { GetServerSideProps } from 'next';
import PageBase from '../../components/PageBase';

export const getServerSideProps: GetServerSideProps = async (context) => {
    const secret = context.req.headers.secret as string;
    const pathSegments = context?.params?.draftRouter;

    // if (secret !== process.env.SERVICE_SECRET) {
    //     return {
    //         notFound: true,
    //     };
    // }

    return await fetchPageProps(pathSegments, true);
};


const fetchPageProps = async (
    routerQuery: string | string[],
    isDraft = false,
): Promise<StaticProps> => {
    const xpPath = routerQueryToXpPathOrId(routerQuery || '');
    const content = await fetchPage(xpPath, isDraft, secret);

    // Media content should redirect to the mediaUrl generated by XP
    if (isMediaContent(content)) {
        return redirectProps(getMediaUrl(content.mediaUrl, isDraft));
    }

    if (isNotFound(content)) {
        const sanitizedPath = sanitizeLegacyUrl(xpPath);

        if (sanitizedPath !== xpPath) {
            return redirectProps(stripXpPathPrefix(sanitizedPath));
        }

        return {
            props: {},
            notFound: true,
        };
    }

    if (content.__typename === ContentType.Error) {
        return errorHandler(content);
    }

    /*
    const redirectTarget = getTargetIfRedirect(content);
    if (redirectTarget) {
        return redirectProps(
            getRelativePathIfInternal(redirectTarget, isDraft)
        );
    }
     */

    return {
        props: { content },
    };
};



export default PageBase;
